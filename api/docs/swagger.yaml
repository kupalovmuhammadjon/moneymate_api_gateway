basePath: /
definitions:
  learning_service.Complete:
    properties:
      lesson_id:
        type: string
      user_id:
        type: string
    type: object
  learning_service.Content:
    properties:
      data:
        items:
          $ref: '#/definitions/learning_service.Data'
        type: array
      type:
        type: string
    type: object
  learning_service.CreateLesson:
    properties:
      content:
        $ref: '#/definitions/learning_service.Content'
      language_code:
        type: string
      level:
        type: string
      title:
        type: string
    type: object
  learning_service.CreateUserLesson:
    properties:
      lesson_id:
        type: string
      user_id:
        type: string
    type: object
  learning_service.Data:
    properties:
      audio_url:
        type: string
      translation:
        type: string
      word:
        type: string
    type: object
  learning_service.Lesson:
    properties:
      content:
        $ref: '#/definitions/learning_service.Content'
      created_at:
        type: string
      id:
        type: string
      language_code:
        type: string
      level:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  learning_service.Lessons:
    properties:
      lessons:
        items:
          $ref: '#/definitions/learning_service.Lesson'
        type: array
    type: object
  learning_service.UserLesson:
    properties:
      completed_at:
        type: string
      created_at:
        type: string
      id:
        type: string
      lesson_id:
        type: string
      user_id:
        type: string
    type: object
  learning_service.UserLessons:
    properties:
      user_lessons:
        items:
          $ref: '#/definitions/learning_service.UserLesson'
        type: array
    type: object
  models.ChangePassword:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  models.Response:
    properties:
      data: {}
      description:
        type: string
      statisCode:
        type: integer
    type: object
  models.UpdateUser:
    properties:
      full_name:
        type: string
      native_language:
        type: string
    type: object
  progress_service.Achievement:
    properties:
      description:
        type: string
      earned_at:
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  progress_service.Achievements:
    properties:
      achievements:
        items:
          $ref: '#/definitions/progress_service.Achievement'
        type: array
    type: object
  progress_service.CreateUserProgress:
    properties:
      language_code:
        type: string
      lessons_completed:
        type: string
      level:
        type: string
      user_id:
        type: string
      vocabulary_learned:
        type: string
      xp:
        type: integer
    type: object
  progress_service.DailyProgress:
    properties:
      date:
        type: string
      lessons_completed:
        type: integer
      new_words_learned:
        type: integer
      xp_earned:
        type: integer
    type: object
  progress_service.DailyProgressInfo:
    properties:
      date:
        type: string
      lessons_completed:
        type: integer
      new_words_learned:
        type: integer
      streak_days:
        type: integer
      xp_earned:
        type: integer
    type: object
  progress_service.DailyProgresses:
    properties:
      daily_progresses:
        items:
          $ref: '#/definitions/progress_service.DailyProgress'
        type: array
    type: object
  progress_service.Ranking:
    properties:
      language:
        type: string
      leaderboard:
        items:
          $ref: '#/definitions/progress_service.User'
        type: array
      user_rank:
        type: integer
    type: object
  progress_service.User:
    properties:
      level:
        type: string
      rank:
        type: integer
      username:
        type: string
      xp:
        type: integer
    type: object
  progress_service.UserProgress:
    properties:
      achievements:
        $ref: '#/definitions/progress_service.Achievements'
      daily_progress:
        $ref: '#/definitions/progress_service.DailyProgresses'
      id:
        type: string
      language_code:
        type: string
      last_updated:
        type: string
      lessons_completed:
        type: integer
      level:
        type: string
      user_id:
        type: string
      vocabulary_learned:
        type: integer
      xp:
        type: integer
    type: object
  progress_service.UserProgressShortInfo:
    properties:
      language:
        type: string
      lessons_completed:
        type: integer
      level:
        type: string
      new_words_learned:
        type: integer
      xp:
        type: integer
    type: object
  progress_service.UserProgresses:
    properties:
      user_progresses:
        items:
          $ref: '#/definitions/progress_service.UserProgress'
        type: array
    type: object
  progress_service.Void:
    type: object
host: localhost:8888
info:
  contact:
    url: http://www.support_me_with_smile
  description: Something big
  title: LinguaLeap
  version: "1.0"
paths:
  /lessons/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a lesson by its ID
      parameters:
      - description: Lesson ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a lesson
      tags:
      - lessons
    get:
      consumes:
      - application/json
      description: Retrieve a lesson by its ID
      parameters:
      - description: Lesson ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learning_service.Lesson'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a lesson by ID
      tags:
      - lessons
  /lessons/{id}/update:
    put:
      consumes:
      - application/json
      description: Update a lesson's details
      parameters:
      - description: Lesson data
        in: body
        name: lesson
        required: true
        schema:
          $ref: '#/definitions/learning_service.Lesson'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a lesson
      tags:
      - lessons
  /lessons/all:
    get:
      consumes:
      - application/json
      description: Retrieve all lessons with optional filters
      parameters:
      - in: query
        name: language_code
        type: string
      - in: query
        name: level
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learning_service.Lessons'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all lessons
      tags:
      - lessons
  /lessons/create:
    post:
      consumes:
      - application/json
      description: Create a new lesson
      parameters:
      - description: Lesson data
        in: body
        name: lesson
        required: true
        schema:
          $ref: '#/definitions/learning_service.CreateLesson'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new lesson
      tags:
      - lessons
  /userlessons/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user lesson by its ID
      parameters:
      - description: UserLesson ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user lesson
      tags:
      - userlessons
    get:
      consumes:
      - application/json
      description: Retrieve a user lesson by its ID
      parameters:
      - description: UserLesson ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learning_service.UserLesson'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user lesson by ID
      tags:
      - userlessons
  /userlessons/all:
    get:
      consumes:
      - application/json
      description: Retrieve all user lessons with optional filters
      parameters:
      - in: query
        name: lesson_id
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learning_service.UserLessons'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all user lessons
      tags:
      - userlessons
  /userlessons/complete:
    post:
      consumes:
      - application/json
      description: Mark a user lesson as completed
      parameters:
      - description: Complete data
        in: body
        name: complete
        required: true
        schema:
          $ref: '#/definitions/learning_service.Complete'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Complete a user lesson
      tags:
      - userlessons
  /userlessons/create:
    post:
      consumes:
      - application/json
      description: Create a new user lesson
      parameters:
      - description: UserLesson data
        in: body
        name: user_lesson
        required: true
        schema:
          $ref: '#/definitions/learning_service.CreateUserLesson'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learning_service.UserLesson'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user lesson
      tags:
      - userlessons
  /users/achievements:
    get:
      consumes:
      - application/json
      description: Get achievements for a specified user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/progress_service.Achievements'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get Achievements By User ID
  /users/password:
    put:
      consumes:
      - application/json
      description: changing user password
      parameters:
      - description: change_password
        in: body
        name: change_password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Change User Password
  /users/profile:
    get:
      consumes:
      - application/json
      description: getting user profile by user id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get User Profile
  /users/progress:
    delete:
      consumes:
      - application/json
      description: Deletes user progress for a specified user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/progress_service.Void'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete User Progress
    post:
      consumes:
      - application/json
      description: Creates user progress for a specified user
      parameters:
      - description: User Progress Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/progress_service.CreateUserProgress'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/progress_service.UserProgress'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create User Progress
    put:
      consumes:
      - application/json
      description: Updates user progress for a specified user
      parameters:
      - description: User Progress Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/progress_service.UserProgress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/progress_service.UserProgress'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update User Progress
  /users/progress/all:
    get:
      consumes:
      - application/json
      description: Get all user progress with optional filters
      parameters:
      - in: query
        name: by_lessons_completed
        type: boolean
      - in: query
        name: language_code
        type: string
      - in: query
        name: level
        type: string
      - in: query
        name: number_of_achivements
        type: integer
      - in: query
        name: user_id
        type: string
      - in: query
        name: vocabulary_learned
        type: integer
      - in: query
        name: xp
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/progress_service.UserProgresses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get All User Progress
  /users/progress/daily:
    get:
      consumes:
      - application/json
      description: Get daily progress for a specified user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/progress_service.DailyProgressInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get Daily Progress
  /users/progress/language:
    get:
      consumes:
      - application/json
      description: Get user progress by language code
      parameters:
      - description: Language Code
        in: query
        name: language_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/progress_service.UserProgressShortInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get Progress By Language
  /users/progress/period:
    get:
      consumes:
      - application/json
      description: Get user progress for a specified period
      parameters:
      - description: Start Date
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/progress_service.DailyProgress'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get Progress By Period
  /users/ranking:
    get:
      consumes:
      - application/json
      description: Get user ranking for a specified language
      parameters:
      - description: Language Code
        in: query
        name: language_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/progress_service.Ranking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get Ranking
  /users/update:
    put:
      consumes:
      - application/json
      description: updating user profile
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update User Profile
swagger: "2.0"
